<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>typdi - Tag - Software Unicorns</title><link>https://softwareunicorns.com/tags/typdi/</link><description>typdi - Tag - Software Unicorns</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>aaron@bubabutech.com (Aaron Qian)</managingEditor><webMaster>aaron@bubabutech.com (Aaron Qian)</webMaster><lastBuildDate>Fri, 01 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://softwareunicorns.com/tags/typdi/" rel="self" type="application/rss+xml"/><item><title>Optimize Graphql Query Performance Using Data Loader</title><link>https://softwareunicorns.com/posts/graphql-typedi-data-loaders-and-scoped-containers/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://softwareunicorns.com/posts/graphql-typedi-data-loaders-and-scoped-containers/</guid><description>While working on a project for a client, we came across an interesting twist to a common problem. We were tasked with making the API backend that powers a mobile app called Playhouse, a mobile app that displays real estate listings to its users in a nice little video package. We decided to make a GraphQL API and got to building. During the design process, we made a point of keeping it maintainable for the long run.</description></item></channel></rss>